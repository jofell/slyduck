{
  "name": "dropzone",
  "version": "1.0.0",
  "description": "Handles drag and drop of files for you.",
  "keywords": [
    "dragndrop",
    "ender"
  ],
  "homepage": "http://www.dropzonejs.com",
  "main": [
    "./lib/dropzone.js"
  ],
  "maintainers": [
    {
      "name": "Matias Meno",
      "email": "m@tias.me",
      "url": "http://www.matiasmeno.com"
    }
  ],
  "contributors": [
    {
      "name": "Matias Meno",
      "email": "m@tias.me",
      "url": "http://www.matiasmeno.com"
    }
  ],
  "bugs": {
    "mail": "m@tias.me"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "repositories": [
    {
      "type": "git",
      "url": "https://github.com/enyo/dropzone.git"
    }
  ],
  "dependencies": {
    "qwery": "3.x",
    "domready": "0.x",
    "bean": "0.x",
    "bonzo": "1.x"
  },
  "ender": "noop",
  "readme": "# Dropzone.js Version 1.0.0\n\nDropzone.js is a light weight JavaScript library for [ender](http://ender.no.de) that turns an HTML element into a dropzone.\nThis means that a user can drag and drop a file onto it, and the file gets uploaded to the server via AJAX.\n\n\n\n## Main features\n\n- Image thumbnail previews. Simply register the callback `thumbnail(file, data)` and display the image wherever you like\n- Multiple files and synchronous uploads\n- Progress updates\n- Support for large files\n\n## Usage\n\nImplicit creation:\n\n    <form action=\"/target\" class=\"dropzone\"></form>\n\nThat's it. Really!\n\nDropzone will automatically attach to it, and handle file drops.\n\nWant more control? You can instantiate dropzone manually like this:\n\n    $(\"div#my-zone\").dropzone({ ...configuration... });\n\n> Note that dropzones don't have to be forms. But if you choose another element you have to pass the `url` parameter in the options.\n\nFor configuration options please look at the [source line 52](https://github.com/enyo/dropzonejs/blob/master/src/dropzone.coffee#L52).\n\n\n\n### Register for events\n\nI use [bean](https://github.com/fat/bean) to manage events. If you want to register to some event you can do so on the `dropzone` object itself:\n\n    var myDropzone = $(\"div#my-zone\").dropzone({ ...configuration... });\n    bean.add(myDropzone, \"error\", function(file, message) { alert(message); });\n\nFor a list of all events, please look at the [source line 25](https://github.com/enyo/dropzonejs/blob/master/src/dropzone.coffee#L25).\n\n\n## Browser support\n\n- Chrome 7+\n- Firefox 4+\n- IE 10+\n- Opera 12+\n- Safari 5+\n\n## Why another library?\n\nI realize that there [are](http://valums.com/ajax-upload/) [already](http://tutorialzine.com/2011/09/html5-file-upload-jquery-php/) [other](http://code.google.com/p/html5uploader/) [libraries](http://blueimp.github.com/jQuery-File-Upload/) out there but the reason I decided to write my own are the following:\n\n- I didn't want it to be too big, and to cumbersome to dive into.\n- I want to design my own elements. I only want to register callbacks so I can update my elements accordingly.\n- Big files should get uploaded without a problem.\n- I wanted a callback for image previews, that don't kill the browser if too many too big images are viewed.\n- I want to use the latest API of browsers. I don't care if it falls back to the normal upload form if the browser is too old.\n",
  "_id": "dropzone@1.0.0",
  "dist": {
    "shasum": "30da8baa21bc4b990a88c81e890d8f68e3cb703d"
  },
  "_from": "dropzone"
}
